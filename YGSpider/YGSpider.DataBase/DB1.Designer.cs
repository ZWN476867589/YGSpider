//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 2015/10/28 15:45:57
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace MainContext
{

    [DatabaseAttribute(Name = "main")]
    [ProviderAttribute(typeof(Devart.Data.SQLite.Linq.Provider.SQLiteDataProvider))]
    public partial class MainDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(MainDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertProductType(ProductType instance);
        partial void UpdateProductType(ProductType instance);
        partial void DeleteProductType(ProductType instance);
        partial void InsertProductPrizeInfo(ProductPrizeInfo instance);
        partial void UpdateProductPrizeInfo(ProductPrizeInfo instance);
        partial void DeleteProductPrizeInfo(ProductPrizeInfo instance);
        partial void InsertProductPrizeCalculateInfo(ProductPrizeCalculateInfo instance);
        partial void UpdateProductPrizeCalculateInfo(ProductPrizeCalculateInfo instance);
        partial void DeleteProductPrizeCalculateInfo(ProductPrizeCalculateInfo instance);

        #endregion

        public MainDataContext() :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public MainDataContext(MappingSource mappingSource) :
        base(GetConnectionString("MainDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public MainDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public MainDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<ProductType> ProductTypes
        {
            get
            {
                return this.GetTable<ProductType>();
            }
        }

        public Devart.Data.Linq.Table<ProductPrizeInfo> ProductPrizeInfos
        {
            get
            {
                return this.GetTable<ProductPrizeInfo>();
            }
        }

        public Devart.Data.Linq.Table<ProductPrizeCalculateInfo> ProductPrizeCalculateInfos
        {
            get
            {
                return this.GetTable<ProductPrizeCalculateInfo>();
            }
        }
    }
}

namespace MainContext
{

    /// <summary>
    /// There are no comments for MainContext.ProductType in the schema.
    /// </summary>
    [Table(Name = @"""main"".ProductType")]
    public partial class ProductType : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _RowID = 1;

        private long _ProductTypeID = 1;

        private string _ProductTypeName;

        private string _BaseUrl;

        private long _BaseApiUrl;

        private long _RecordCount;

        private long _PageSize;

        private string _StartSellTime;

        private string _ModefiedTime;

        private long _IsDownloadAll = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRowIDChanging(long value);
        partial void OnRowIDChanged();
        partial void OnProductTypeIDChanging(long value);
        partial void OnProductTypeIDChanged();
        partial void OnProductTypeNameChanging(string value);
        partial void OnProductTypeNameChanged();
        partial void OnBaseUrlChanging(string value);
        partial void OnBaseUrlChanged();
        partial void OnBaseApiUrlChanging(long value);
        partial void OnBaseApiUrlChanged();
        partial void OnRecordCountChanging(long value);
        partial void OnRecordCountChanged();
        partial void OnPageSizeChanging(long value);
        partial void OnPageSizeChanged();
        partial void OnStartSellTimeChanging(string value);
        partial void OnStartSellTimeChanged();
        partial void OnModefiedTimeChanging(string value);
        partial void OnModefiedTimeChanged();
        partial void OnIsDownloadAllChanging(long value);
        partial void OnIsDownloadAllChanged();
        #endregion

        public ProductType()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RowID in the schema.
        /// </summary>
        [Column(Name = @"""RowID""", Storage = "_RowID", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
        public long RowID
        {
            get
            {
                return this._RowID;
            }
            set
            {
                if (this._RowID != value)
                {
                    this.OnRowIDChanging(value);
                    this.SendPropertyChanging();
                    this._RowID = value;
                    this.SendPropertyChanged("RowID");
                    this.OnRowIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductTypeID in the schema.
        /// </summary>
        [Column(Storage = "_ProductTypeID", CanBeNull = false, DbType = "INTEGER NOT NULL", IsPrimaryKey = true)]
        public long ProductTypeID
        {
            get
            {
                return this._ProductTypeID;
            }
            set
            {
                if (this._ProductTypeID != value)
                {
                    this.OnProductTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProductTypeID = value;
                    this.SendPropertyChanged("ProductTypeID");
                    this.OnProductTypeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ProductTypeName in the schema.
        /// </summary>
        [Column(Storage = "_ProductTypeName", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ProductTypeName
        {
            get
            {
                return this._ProductTypeName;
            }
            set
            {
                if (this._ProductTypeName != value)
                {
                    this.OnProductTypeNameChanging(value);
                    this.SendPropertyChanging();
                    this._ProductTypeName = value;
                    this.SendPropertyChanged("ProductTypeName");
                    this.OnProductTypeNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseUrl in the schema.
        /// </summary>
        [Column(Storage = "_BaseUrl", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string BaseUrl
        {
            get
            {
                return this._BaseUrl;
            }
            set
            {
                if (this._BaseUrl != value)
                {
                    this.OnBaseUrlChanging(value);
                    this.SendPropertyChanging();
                    this._BaseUrl = value;
                    this.SendPropertyChanged("BaseUrl");
                    this.OnBaseUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for BaseApiUrl in the schema.
        /// </summary>
        [Column(Storage = "_BaseApiUrl", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long BaseApiUrl
        {
            get
            {
                return this._BaseApiUrl;
            }
            set
            {
                if (this._BaseApiUrl != value)
                {
                    this.OnBaseApiUrlChanging(value);
                    this.SendPropertyChanging();
                    this._BaseApiUrl = value;
                    this.SendPropertyChanged("BaseApiUrl");
                    this.OnBaseApiUrlChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RecordCount in the schema.
        /// </summary>
        [Column(Storage = "_RecordCount", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long RecordCount
        {
            get
            {
                return this._RecordCount;
            }
            set
            {
                if (this._RecordCount != value)
                {
                    this.OnRecordCountChanging(value);
                    this.SendPropertyChanging();
                    this._RecordCount = value;
                    this.SendPropertyChanged("RecordCount");
                    this.OnRecordCountChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PageSize in the schema.
        /// </summary>
        [Column(Storage = "_PageSize", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long PageSize
        {
            get
            {
                return this._PageSize;
            }
            set
            {
                if (this._PageSize != value)
                {
                    this.OnPageSizeChanging(value);
                    this.SendPropertyChanging();
                    this._PageSize = value;
                    this.SendPropertyChanged("PageSize");
                    this.OnPageSizeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for StartSellTime in the schema.
        /// </summary>
        [Column(Storage = "_StartSellTime", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string StartSellTime
        {
            get
            {
                return this._StartSellTime;
            }
            set
            {
                if (this._StartSellTime != value)
                {
                    this.OnStartSellTimeChanging(value);
                    this.SendPropertyChanging();
                    this._StartSellTime = value;
                    this.SendPropertyChanged("StartSellTime");
                    this.OnStartSellTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModefiedTime in the schema.
        /// </summary>
        [Column(Storage = "_ModefiedTime", CanBeNull = false, DbType = "TEXT NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string ModefiedTime
        {
            get
            {
                return this._ModefiedTime;
            }
            set
            {
                if (this._ModefiedTime != value)
                {
                    this.OnModefiedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ModefiedTime = value;
                    this.SendPropertyChanged("ModefiedTime");
                    this.OnModefiedTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsDownloadAll in the schema.
        /// </summary>
        [Column(Storage = "_IsDownloadAll", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IsDownloadAll
        {
            get
            {
                return this._IsDownloadAll;
            }
            set
            {
                if (this._IsDownloadAll != value)
                {
                    this.OnIsDownloadAllChanging(value);
                    this.SendPropertyChanging();
                    this._IsDownloadAll = value;
                    this.SendPropertyChanged("IsDownloadAll");
                    this.OnIsDownloadAllChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MainContext.ProductPrizeInfo in the schema.
    /// </summary>
    [Table(Name = @"""main"".ProductPrizeInfo")]
    public partial class ProductPrizeInfo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _RowID;

        private long _ProductTypeID;

        private System.Nullable<long> _CodeID;

        private string _GoodsPic;

        private string _GoodsName;

        private System.Nullable<long> _CodePeriod;

        private string _CodePrice;

        private string _RaffTime;

        private string _UserWeb;

        private string _UserName;

        private string _UserPhoto;

        private string _UserAddr;

        private string _UserRNO;

        private string _UserBuyNum;

        private string _PostID;

        private System.Nullable<long> _CodeType;

        private string _ModefiedTime;

        private long _IsDownloadAllBuyRecord = 0;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRowIDChanging(long value);
        partial void OnRowIDChanged();
        partial void OnProductTypeIDChanging(long value);
        partial void OnProductTypeIDChanged();
        partial void OnCodeIDChanging(System.Nullable<long> value);
        partial void OnCodeIDChanged();
        partial void OnGoodsPicChanging(string value);
        partial void OnGoodsPicChanged();
        partial void OnGoodsNameChanging(string value);
        partial void OnGoodsNameChanged();
        partial void OnCodePeriodChanging(System.Nullable<long> value);
        partial void OnCodePeriodChanged();
        partial void OnCodePriceChanging(string value);
        partial void OnCodePriceChanged();
        partial void OnRaffTimeChanging(string value);
        partial void OnRaffTimeChanged();
        partial void OnUserWebChanging(string value);
        partial void OnUserWebChanged();
        partial void OnUserNameChanging(string value);
        partial void OnUserNameChanged();
        partial void OnUserPhotoChanging(string value);
        partial void OnUserPhotoChanged();
        partial void OnUserAddrChanging(string value);
        partial void OnUserAddrChanged();
        partial void OnUserRNOChanging(string value);
        partial void OnUserRNOChanged();
        partial void OnUserBuyNumChanging(string value);
        partial void OnUserBuyNumChanged();
        partial void OnPostIDChanging(string value);
        partial void OnPostIDChanged();
        partial void OnCodeTypeChanging(System.Nullable<long> value);
        partial void OnCodeTypeChanged();
        partial void OnModefiedTimeChanging(string value);
        partial void OnModefiedTimeChanged();
        partial void OnIsDownloadAllBuyRecordChanging(long value);
        partial void OnIsDownloadAllBuyRecordChanged();
        #endregion

        public ProductPrizeInfo()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RowID in the schema.
        /// </summary>
        [Column(Name = @"""RowID""", Storage = "_RowID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long RowID
        {
            get
            {
                return this._RowID;
            }
        }

    
        /// <summary>
        /// There are no comments for ProductTypeID in the schema.
        /// </summary>
        [Column(Storage = "_ProductTypeID", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long ProductTypeID
        {
            get
            {
                return this._ProductTypeID;
            }
            set
            {
                if (this._ProductTypeID != value)
                {
                    this.OnProductTypeIDChanging(value);
                    this.SendPropertyChanging();
                    this._ProductTypeID = value;
                    this.SendPropertyChanged("ProductTypeID");
                    this.OnProductTypeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodeID in the schema.
        /// </summary>
        [Column(Name = @"codeID", Storage = "_CodeID", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> CodeID
        {
            get
            {
                return this._CodeID;
            }
            set
            {
                if (this._CodeID != value)
                {
                    this.OnCodeIDChanging(value);
                    this.SendPropertyChanging();
                    this._CodeID = value;
                    this.SendPropertyChanged("CodeID");
                    this.OnCodeIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodsPic in the schema.
        /// </summary>
        [Column(Name = @"goodsPic", Storage = "_GoodsPic", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string GoodsPic
        {
            get
            {
                return this._GoodsPic;
            }
            set
            {
                if (this._GoodsPic != value)
                {
                    this.OnGoodsPicChanging(value);
                    this.SendPropertyChanging();
                    this._GoodsPic = value;
                    this.SendPropertyChanged("GoodsPic");
                    this.OnGoodsPicChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for GoodsName in the schema.
        /// </summary>
        [Column(Name = @"goodsName", Storage = "_GoodsName", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string GoodsName
        {
            get
            {
                return this._GoodsName;
            }
            set
            {
                if (this._GoodsName != value)
                {
                    this.OnGoodsNameChanging(value);
                    this.SendPropertyChanging();
                    this._GoodsName = value;
                    this.SendPropertyChanged("GoodsName");
                    this.OnGoodsNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodePeriod in the schema.
        /// </summary>
        [Column(Name = @"codePeriod", Storage = "_CodePeriod", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> CodePeriod
        {
            get
            {
                return this._CodePeriod;
            }
            set
            {
                if (this._CodePeriod != value)
                {
                    this.OnCodePeriodChanging(value);
                    this.SendPropertyChanging();
                    this._CodePeriod = value;
                    this.SendPropertyChanged("CodePeriod");
                    this.OnCodePeriodChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodePrice in the schema.
        /// </summary>
        [Column(Name = @"codePrice", Storage = "_CodePrice", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string CodePrice
        {
            get
            {
                return this._CodePrice;
            }
            set
            {
                if (this._CodePrice != value)
                {
                    this.OnCodePriceChanging(value);
                    this.SendPropertyChanging();
                    this._CodePrice = value;
                    this.SendPropertyChanged("CodePrice");
                    this.OnCodePriceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for RaffTime in the schema.
        /// </summary>
        [Column(Name = @"raffTime", Storage = "_RaffTime", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string RaffTime
        {
            get
            {
                return this._RaffTime;
            }
            set
            {
                if (this._RaffTime != value)
                {
                    this.OnRaffTimeChanging(value);
                    this.SendPropertyChanging();
                    this._RaffTime = value;
                    this.SendPropertyChanged("RaffTime");
                    this.OnRaffTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserWeb in the schema.
        /// </summary>
        [Column(Name = @"userWeb", Storage = "_UserWeb", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string UserWeb
        {
            get
            {
                return this._UserWeb;
            }
            set
            {
                if (this._UserWeb != value)
                {
                    this.OnUserWebChanging(value);
                    this.SendPropertyChanging();
                    this._UserWeb = value;
                    this.SendPropertyChanged("UserWeb");
                    this.OnUserWebChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserName in the schema.
        /// </summary>
        [Column(Name = @"userName", Storage = "_UserName", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this.SendPropertyChanging();
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserPhoto in the schema.
        /// </summary>
        [Column(Name = @"userPhoto", Storage = "_UserPhoto", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string UserPhoto
        {
            get
            {
                return this._UserPhoto;
            }
            set
            {
                if (this._UserPhoto != value)
                {
                    this.OnUserPhotoChanging(value);
                    this.SendPropertyChanging();
                    this._UserPhoto = value;
                    this.SendPropertyChanged("UserPhoto");
                    this.OnUserPhotoChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserAddr in the schema.
        /// </summary>
        [Column(Name = @"userAddr", Storage = "_UserAddr", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string UserAddr
        {
            get
            {
                return this._UserAddr;
            }
            set
            {
                if (this._UserAddr != value)
                {
                    this.OnUserAddrChanging(value);
                    this.SendPropertyChanging();
                    this._UserAddr = value;
                    this.SendPropertyChanged("UserAddr");
                    this.OnUserAddrChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserRNO in the schema.
        /// </summary>
        [Column(Name = @"userRNO", Storage = "_UserRNO", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string UserRNO
        {
            get
            {
                return this._UserRNO;
            }
            set
            {
                if (this._UserRNO != value)
                {
                    this.OnUserRNOChanging(value);
                    this.SendPropertyChanging();
                    this._UserRNO = value;
                    this.SendPropertyChanged("UserRNO");
                    this.OnUserRNOChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for UserBuyNum in the schema.
        /// </summary>
        [Column(Name = @"userBuyNum", Storage = "_UserBuyNum", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string UserBuyNum
        {
            get
            {
                return this._UserBuyNum;
            }
            set
            {
                if (this._UserBuyNum != value)
                {
                    this.OnUserBuyNumChanging(value);
                    this.SendPropertyChanging();
                    this._UserBuyNum = value;
                    this.SendPropertyChanged("UserBuyNum");
                    this.OnUserBuyNumChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PostID in the schema.
        /// </summary>
        [Column(Name = @"postID", Storage = "_PostID", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string PostID
        {
            get
            {
                return this._PostID;
            }
            set
            {
                if (this._PostID != value)
                {
                    this.OnPostIDChanging(value);
                    this.SendPropertyChanging();
                    this._PostID = value;
                    this.SendPropertyChanged("PostID");
                    this.OnPostIDChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CodeType in the schema.
        /// </summary>
        [Column(Name = @"codeType", Storage = "_CodeType", DbType = "INTEGER", UpdateCheck = UpdateCheck.Never)]
        public System.Nullable<long> CodeType
        {
            get
            {
                return this._CodeType;
            }
            set
            {
                if (this._CodeType != value)
                {
                    this.OnCodeTypeChanging(value);
                    this.SendPropertyChanging();
                    this._CodeType = value;
                    this.SendPropertyChanged("CodeType");
                    this.OnCodeTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ModefiedTime in the schema.
        /// </summary>
        [Column(Storage = "_ModefiedTime", DbType = "TEXT", UpdateCheck = UpdateCheck.Never)]
        public string ModefiedTime
        {
            get
            {
                return this._ModefiedTime;
            }
            set
            {
                if (this._ModefiedTime != value)
                {
                    this.OnModefiedTimeChanging(value);
                    this.SendPropertyChanging();
                    this._ModefiedTime = value;
                    this.SendPropertyChanged("ModefiedTime");
                    this.OnModefiedTimeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for IsDownloadAllBuyRecord in the schema.
        /// </summary>
        [Column(Storage = "_IsDownloadAllBuyRecord", CanBeNull = false, DbType = "INTEGER NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public long IsDownloadAllBuyRecord
        {
            get
            {
                return this._IsDownloadAllBuyRecord;
            }
            set
            {
                if (this._IsDownloadAllBuyRecord != value)
                {
                    this.OnIsDownloadAllBuyRecordChanging(value);
                    this.SendPropertyChanging();
                    this._IsDownloadAllBuyRecord = value;
                    this.SendPropertyChanged("IsDownloadAllBuyRecord");
                    this.OnIsDownloadAllBuyRecordChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for MainContext.ProductPrizeCalculateInfo in the schema.
    /// </summary>
    [Table(Name = @"""main"".ProductPrizeCalculateInfo")]
    public partial class ProductPrizeCalculateInfo : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private long _RowID;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnRowIDChanging(long value);
        partial void OnRowIDChanged();
        #endregion

        public ProductPrizeCalculateInfo()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for RowID in the schema.
        /// </summary>
        [Column(Name = @"""RowID""", Storage = "_RowID", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INTEGER NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public long RowID
        {
            get
            {
                return this._RowID;
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
